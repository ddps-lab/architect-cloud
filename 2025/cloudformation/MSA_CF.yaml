AWSTemplateFormatVersion: 2010-09-09
Description: Samsung Cloud Arch MSA (Standard MySQL)

Mappings:
  RegionMap:
    us-east-1:
      "Ubuntu24": ami-0731becbf832f281e
    us-west-2:
      "Ubuntu24": ami-0a605bc2ef5707a18

Resources:
  # IAM Roles for CI/CD
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PipelineRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
        - arn:aws:iam::aws:policy/AWSCodeDeployDeployerAccess
        - arn:aws:iam::aws:policy/CloudWatchEventsReadOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole

  PipelineRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ECS task definition management
      Roles:
        - !Ref PipelineRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ecs:RegisterTaskDefinition
              - ecs:ListTaskDefinitions
              - ecs:DescribeTaskDefinition
            Resource: "*"
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: arn:aws:iam::*:role/PipelineRole

  DeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DeployRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole

  # VPC and Networking
  MSAVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MSAVPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MSAIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MSAVPC
      InternetGatewayId: !Ref IGW

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MSAVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.16.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: karpenter.sh/discovery
          Value: coffee-supplier

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MSAVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.16.20.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: karpenter.sh/discovery
          Value: coffee-supplier

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MSAVPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PublicSubnetRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MSAVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.16.30.0/24
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MSAVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.16.40.0/24
      Tags:
        - Key: Name
          Value: Private Subnet 2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MSAVPC
      Tags:
        - Key: Name
          Value: Private Route Table 1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MSAVPC
      Tags:
        - Key: Name
          Value: Private Route Table 2

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # EC2 for Monolithic App
  EC2NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  myEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: myInstanceProfile
      Roles:
        - !Ref EC2NodeInstanceRole

  Ec2AppNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH
      VpcId: !Ref MSAVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  Ec2AppNodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: Ec2AppNodeTemplate
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref myEc2InstanceProfile
        ImageId: !FindInMap [RegionMap, !Ref AWS::Region, Ubuntu24]
        InstanceType: t3.medium
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeleteOnTermination: true
            DeviceIndex: 0
            SubnetId: !Ref PublicSubnet1
            Groups:
              - !Ref Ec2AppNodeSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log | logger -t user-data -s 2>/dev/console) 2>&1
            apt update -y
            snap install aws-cli --classic
            apt install nodejs unzip wget npm mysql-client tree nmap -y
            cd /home/ubuntu
            git clone https://github.com/ddps-lab/architect-cloud.git
            cd architect-cloud/2025/monolithic_code
            npm install

            mysql -u admin -plab-password -h ${MySQLDBInstance.Endpoint.Address} -P 3306 -e \
            "SELECT COUNT(*) AS cnt FROM mysql.user WHERE user = 'nodeapp' AND host = '%'\G" | grep -q 'cnt: 0' && \
            mysql -u admin -plab-password -h ${MySQLDBInstance.Endpoint.Address} -P 3306 -e \
            "CREATE USER 'nodeapp'@'%' IDENTIFIED BY 'coffee';"

            mysql -u admin -plab-password -h ${MySQLDBInstance.Endpoint.Address} -P 3306 -e \
            "GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER ON *.* TO 'nodeapp'@'%' WITH GRANT OPTION;"

            mysql -u admin -plab-password -h ${MySQLDBInstance.Endpoint.Address} -P 3306 -e \
            "CREATE DATABASE IF NOT EXISTS COFFEE;"

            mysql -u admin -plab-password -h ${MySQLDBInstance.Endpoint.Address} -P 3306 -D COFFEE -e \
            "CREATE TABLE IF NOT EXISTS suppliers(
                id INT NOT NULL AUTO_INCREMENT,
                name VARCHAR(255) NOT NULL,
                address VARCHAR(255) NOT NULL,
                city VARCHAR(255) NOT NULL,
                state VARCHAR(255) NOT NULL,
                email VARCHAR(255) NOT NULL,
                phone VARCHAR(100) NOT NULL,
                PRIMARY KEY (id)
            );"

            sed -i "s|REPLACE-DB-HOST|${MySQLDBInstance.Endpoint.Address}|g" /home/ubuntu/architect-cloud/2025/monolithic_code/app/config/config.js
            sed -i "s|REPLACE-DB-HOST|${MySQLDBInstance.Endpoint.Address}|g" /home/ubuntu/architect-cloud/2025/microservice/customer/app/config/config.js
            sed -i "s|REPLACE-DB-HOST|${MySQLDBInstance.Endpoint.Address}|g" /home/ubuntu/architect-cloud/2025/microservice/employee/app/config/config.js

            node index.js &

            cat <<EOF > /etc/rc.local
            #!/bin/bash
            cd /home/ubuntu/architect-cloud/2025/monolithic_code/
            node index.js
            EOF
            chmod +x /etc/rc.local
        MetadataOptions:
          HttpPutResponseHopLimit: 3

  Ec2AppNode:
    Type: AWS::EC2::Instance
    DependsOn:
      - AttachGateway
      - MySQLDBInstance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref Ec2AppNodeLaunchTemplate
        Version: !GetAtt Ec2AppNodeLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: MSA-MonolithicAppServer

  # Database Subnets & Security
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Private DB subnets
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: DBSubnetGroup

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DBSecurityGroup
      GroupDescription: Enable MySQL access
      VpcId: !Ref MSAVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: DBSecurityGroup

  # Standard MySQL Instance
  MySQLDBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBInstanceIdentifier: msa-mysql
      Engine: mysql
      EngineVersion: "8.0.42"
      DBInstanceClass: db.t3.micro
      AllocatedStorage: "20"
      StorageType: gp2
      MultiAZ: false
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      MasterUsername: admin
      MasterUserPassword: lab-password
      BackupRetentionPeriod: 0
      AutoMinorVersionUpgrade: true
      Tags:
        - Key: Name
          Value: MSAMySQL

Outputs:
  MySQLEndpoint:
    Description: Endpoint of the MySQL instance
    Value: !GetAtt [MySQLDBInstance, Endpoint.Address]
    Export:
      Name: MSAMySQLEndpoint
